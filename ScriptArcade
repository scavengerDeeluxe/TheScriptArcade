#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: af86a5f0-d62a-4ef9-be4d-94075d01efed
# Source File: L:\Runner\PwshScriptRunner\PwshScriptRunner.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2023 v5.8.224
     Generated on:       6/2/2025 2:24 AM
     Generated by:       scav
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2023
#>



#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][reflection.assembly]::Load('Microsoft.VisualStudio.Web.PageInspector.Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][reflection.assembly]::Load('Microsoft.WSMan.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
[void][reflection.assembly]::Load('Microsoft_VsaVb, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][reflection.assembly]::Load('PresentationUI, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
[void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][reflection.assembly]::Load('WindowsFormsIntegration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
    <#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
    Param ([String]$Commandline)
		
    #--------------------------------------------------------------------------
    #TODO: Add initialization script here (Load modules and check requirements)
	
	
    #--------------------------------------------------------------------------
	
    if ((Show-pazwh_psf) -eq 'OK') {
		
    }
	
    $script:ExitCode = 0 #Set the exit code for the Packager
}



#endregion Source: Startup.pss

#region Source: Globals.ps1
#--------------------------------------------
# Declare Global Variables and Functions here
#--------------------------------------------
	
	
#Sample function that provides the location of the script
function Get-ScriptDirectory {
    <#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
    [OutputType([string])]
    param ()
    if ($null -ne $hostinvocation) {
        Split-Path $hostinvocation.MyCommand.path
    }
    else {
        Split-Path $script:MyInvocation.MyCommand.Path
    }
}
	
#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory

# Default paths for logs and temporary script staging
$global:LogFilePath = Join-Path $ScriptDirectory 'script.log'
$global:StagingPath = Join-Path ([System.IO.Path]::GetTempPath()) 'ScriptArcade'
	
	
	
	
#endregion Source: Globals.ps1
function Show-SettingsDialog {
    [System.Windows.Forms.Application]::EnableVisualStyles()

    $form = New-Object System.Windows.Forms.Form
    $form.Text = 'Settings'
    $form.StartPosition = 'CenterParent'
    $form.Size = New-Object System.Drawing.Size(400,170)

    $lblLog = New-Object System.Windows.Forms.Label
    $lblLog.Text = 'Log File Path:'
    $lblLog.Location = New-Object System.Drawing.Point(10,20)
    $lblLog.AutoSize = $true
    $form.Controls.Add($lblLog)

    $txtLog = New-Object System.Windows.Forms.TextBox
    $txtLog.Size = New-Object System.Drawing.Size(260,20)
    $txtLog.Location = New-Object System.Drawing.Point(110,18)
    $txtLog.Text = $global:LogFilePath
    $form.Controls.Add($txtLog)

    $lblStage = New-Object System.Windows.Forms.Label
    $lblStage.Text = 'Staging Folder:'
    $lblStage.Location = New-Object System.Drawing.Point(10,60)
    $lblStage.AutoSize = $true
    $form.Controls.Add($lblStage)

    $txtStage = New-Object System.Windows.Forms.TextBox
    $txtStage.Size = New-Object System.Drawing.Size(260,20)
    $txtStage.Location = New-Object System.Drawing.Point(110,58)
    $txtStage.Text = $global:StagingPath
    $form.Controls.Add($txtStage)

    $btnOK = New-Object System.Windows.Forms.Button
    $btnOK.Text = 'OK'
    $btnOK.Location = New-Object System.Drawing.Point(210,100)
    $btnOK.Add_Click({
        $global:LogFilePath = $txtLog.Text
        $global:StagingPath = $txtStage.Text
        $form.Close()
    })
    $form.Controls.Add($btnOK)

    $btnCancel = New-Object System.Windows.Forms.Button
    $btnCancel.Text = 'Cancel'
    $btnCancel.Location = New-Object System.Drawing.Point(300,100)
    $btnCancel.Add_Click({ $form.Close() })
    $form.Controls.Add($btnCancel)

    $form.ShowDialog() | Out-Null
}

#region Source: pazwh.psf
function Show-pazwh_psf {
    #----------------------------------------------
    #region Import the Assemblies
    #----------------------------------------------
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Tools.Office.Excel.AddInAdapter.v9.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Tools.Office.Excel.AddInProxy.v9.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Tools.Office.Excel.HostAdapter.v10.0, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Tools.Office.Word.AddInAdapter.v9.0, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Tools.Office.Word.HostAdapter.v10.0, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.VisualStudio.Web.PageInspector.Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('Microsoft.Windows.Appx.PackageManager.Commands, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('Microsoft.Windows.Appx.PackageManager.Commands.resources, Version=10.0.0.0, Culture=en, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('Microsoft.WSMan.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('Microsoft_VsaVb, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('PresentationUI, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('WindowsFormsIntegration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('UIAutomationTypes, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35')
    [void][reflection.assembly]::Load('System.Windows.Controls.Ribbon, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [void][reflection.assembly]::Load('Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    [void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
    #endregion Import Assemblies

    #----------------------------------------------
    #region Generated Form Objects
    #----------------------------------------------
    [System.Windows.Forms.Application]::EnableVisualStyles()
    $formScriptExecutionArcad = New-Object 'System.Windows.Forms.Form'
    $MainPanel = New-Object 'System.Windows.Forms.Panel'
    $buttonExportForLocalExecut = New-Object 'System.Windows.Forms.Button'
    $buttonSettings = 'System.Windows.Forms.Button'
    $buttonReviewScript = New-Object 'System.Windows.Forms.Button'
    $panel1 = New-Object 'System.Windows.Forms.Panel'
    $lbl_fullScript = New-Object 'System.Windows.Forms.Label'
    $lblDescription = New-Object 'System.Windows.Forms.Label'
    $lblRating = New-Object 'System.Windows.Forms.Label'
    $labelFullScript = New-Object 'System.Windows.Forms.Label'
    $labelDescription = New-Object 'System.Windows.Forms.Label'
    $labelRisk = New-Object 'System.Windows.Forms.Label'
    $lbl_runs = New-Object 'System.Windows.Forms.Label'
    $lbl_risk = New-Object 'System.Windows.Forms.Label'
    $labelRuns = New-Object 'System.Windows.Forms.Label'
    $labelRating = New-Object 'System.Windows.Forms.Label'
    $lbl_scriptcontact = New-Object 'System.Windows.Forms.Label'
    $labelContact = New-Object 'System.Windows.Forms.Label'
    $lbl_scriptname = New-Object 'System.Windows.Forms.Label'
    $labelScriptName = New-Object 'System.Windows.Forms.Label'
    $labelScript = New-Object 'System.Windows.Forms.Label'
    $statusstrip1 = New-Object 'System.Windows.Forms.StatusStrip'
    $textbox1 = New-Object 'System.Windows.Forms.TextBox'
    $btn_executionPrepare = New-Object 'System.Windows.Forms.Button'
    $buttonQuit = New-Object 'System.Windows.Forms.Button'
    $rtb_selection = New-Object 'System.Windows.Forms.RichTextBox'
    $propertygrid1 = New-Object 'System.Windows.Forms.PropertyGrid'
    $scriptsAvail = New-Object 'System.Windows.Forms.ListBox'
    $labelScriptExecutionAutom = New-Object 'System.Windows.Forms.Label'
    $propertygrid2 = New-Object 'System.Windows.Forms.PropertyGrid'
    $splitcontainer1 = New-Object 'System.Windows.Forms.SplitContainer'
    $timer1 = New-Object 'System.Windows.Forms.Timer'
    $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
    #endregion Generated Form Objects

    #----------------------------------------------
    # User Generated Script
    #----------------------------------------------
	
    $formScriptExecutionArcad_Load = {
        #TODO: Initialize Form Controls here
        $scriptLibrary = Get-RemoteGitScripts
    }
	
    function Get-RemoteGitScripts {
        $apiUrl = "https://api.github.com/repos/scavengerDeeluxe/PowerShellUI/contents/PowerShellUI/Scripts"
        $response = Invoke-RestMethod -Uri $apiUrl -Headers @{ "User-Agent" = "PowerShell" }
		
        $jsonFiles = $response | Where-Object { $_.name -like "*.json" } | Select-Object -ExpandProperty download_url
        $jsonFiles
		
        # Convert to a strongly typed IList<string>
        $typedList = [System.Collections.Generic.List[string]]::new()
        $jsonFiles | ForEach-Object { $typedList.Add($_) }
		
        # Output to verify
        $typedList.GetType().FullName
        $script:ScriptArray = New-Object System.Collections.ArrayList
        $displayList = New-Object System.Collections.ArrayList
                        foreach ($item in $typedList)
                {
                        if (!(Test-Path $global:StagingPath)) {
                                New-Item -ItemType Directory -Path $global:StagingPath | Out-Null
                        }
                        $scriptsAround = Invoke-WebRequest -UseBasicParsing -Uri $item
                        $localFile = Join-Path $global:StagingPath ([System.IO.Path]::GetFileName($item))
                        $scriptsAround.Content | Out-File -FilePath $localFile -Force
                        $addNewScript = Get-Content $localFile | ConvertFrom-Json
                        $ScriptArray.Add($addNewScript)
                        $displayList.Add($addNewScript.script.name)
                        $scriptsAvail.Items.Add($addNewScript.script.name)
                }
    }
    function Get-DynamicFormInputs {
        param ([Hashtable]$ControlMap,
            [System.Windows.Forms.Panel]$Panel)
		
        $results = @{ }
        foreach ($key in $ControlMap.Keys) {
            $ctrl = $ControlMap[$key]
            if (-not $ctrl) { continue }
			
            $type = $ctrl.GetType().Name
            switch ($type) {
                'TextBox' { $results[$key] = $ctrl.Text }
                'CheckedListBox' {
                    $selected = foreach ($item in $ctrl.CheckedItems) {
                        if ($item.PSObject.Properties['ID']) { $item.ID }
                        else { $item.ToString() }
                    }
                    $results[$key] = $selected
                }
                'ComboBox' {
                    $sel = $ctrl.SelectedItem
                    $results[$key] = if ($sel.PSObject.Properties['Selection']) { $sel.Selection }
                    else { $sel.ToString() }
                }
                'DateTimePicker' { $results[$key] = $ctrl.Value.ToString("yyyy-MM-dd HH:mm:ss") }
            }
        }
		
        # Optional: handle branched control
        if ($Panel.Controls.ContainsKey("branchControl")) {
            $branch = $Panel.Controls["branchControl"]
            $btype = $branch.GetType().Name
            $results["TimeBranchInput"] = switch ($btype) {
                'TextBox' { $branch.Text }
                'DateTimePicker' { $branch.Value.ToString("yyyy-MM-dd HH:mm:ss") }
                default { "<unsupported branch control>" }
            }
        }
		
        return $results
    }
    function Run-DynamicScript {
        $fullscript = (iwr -UseBasicParsing -uri $script:selectedFull.script.url).content
        $collectedInputs = @{ }
				
        foreach ($key in $global:InputControls.Keys) {
            $ctrl = $global:InputControls[$key]
					
            switch ($ctrl.GetType().Name) {
                "TextBox" {
                    $collectedInputs[$key] = $ctrl.Text
                }
                "ComboBox" {
                    $collectedInputs[$key] = $ctrl.SelectedItem
                }
                "CheckedListBox" {
                    $selectedItems = @()
                    foreach ($item in $ctrl.CheckedItems) {
                        $selectedItems += $item
                    }
                    $collectedInputs[$key] = $selectedItems
                }
                "DateTimePicker" {
                    $collectedInputs[$key] = $ctrl.Value.ToString("yyyy-MM-dd")
                }
                "DataGridView" {
                    # Optional: handle if you're using grid for input
                    $collectedInputs[$key] = "GridDataHere"
                }
            }
        }
				
        # Debug output
        $collectedInputs.GetEnumerator() | ForEach-Object {
            Write-Host "$($_.Key): $($_.Value)"
        }
				
        # Optionally inject into script (e.g., pass as params)
        # Invoke-Expression "./myscript.ps1 -ComputerName $($collectedInputs['ComputerName'])"
    }
    #region Control Helper Functions
    function Replace-PlaceHolder {
        <#
		.SYNOPSIS
			Replaces the place holder control with another.
	
		.DESCRIPTION
			Replaces the place holder control with another.
		
		.PARAMETER PlaceHolderControl
			The control you wish to replace.
	
		.PARAMETER ReplaceControl
			The control that replaces the place holder.
		
		.EXAMPLE
			Replace-PlaceHolder -PlaceHolderControl $elementHostPlaceholder -ReplaceControl $elementhost
	#>
        Param([System.Windows.Forms.Control]$PlaceHolderControl,
            [System.Windows.Forms.Control]$ReplaceControl)
		
        $ReplaceControl.Location = $PlaceHolderControl.Location;
        $ReplaceControl.Size = $PlaceHolderControl.Size;
        $ReplaceControl.TabIndex = $PlaceHolderControl.TabIndex;
        $ReplaceControl.Dock = $PlaceHolderControl.Dock 
        $ReplaceControl.Anchor = $PlaceHolderControl.Anchor
        $PlaceHolderControl.Parent.Controls.Add($ReplaceControl)
        $PlaceHolderControl.Parent.Controls.Remove($PlaceHolderControl)
        $PlaceHolderControl.Visible = $false
    }
    function Update-ElementHost {
        <#
		.SYNOPSIS
			Loads XAML into a ElementHost
	
		.DESCRIPTION
			Loads XAML into a ElementHost, which then displays the WPF control.
	
		.RETURNS
			Returns the WPF control
		
		.PARAMETER ElementHost
			The ElementHost control to load the XAML.
	
		.PARAMETER XAML
			The XAML to create the WPF Control
		
		.EXAMPLE
			Update-ElementHost -Elementhost $elementhost1 -XAML $xaml | Out-Null
	#>
        Param(
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.Integration.ElementHost]$Elementhost,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [Xml]$XAML)
			
        $reader = New-Object System.Xml.XmlNodeReader $XAML
		
        if (-not $reader) {
            return
        }
		
        $WPFControl = [Windows.Markup.XamlReader]::Load( $reader )
        $Elementhost.Child = $WPFControl
		
        return $WPFControl
    }
    function Update-ListViewColumnSort {
        <#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
        param
        (
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            [System.Windows.Forms.ListView]
            $ListView,
            [Parameter(Mandatory = $true)]
            [int]
            $ColumnIndex,
            [System.Windows.Forms.SortOrder]
            $SortOrder = 'None'
        )
		
        if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count)) {
            return;
        }
		
        #region Define ListViewItemComparer
        try {
            [ListViewItemComparer] | Out-Null
        }
        catch {
            Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
        }
        #endregion
		
        if ($ListView.Tag -is [ListViewItemComparer]) {
            #Toggle the Sort Order
            if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None) {
                if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending') {
                    $ListView.Tag.sortOrder = 'Descending'
                }
                else {
                    $ListView.Tag.sortOrder = 'Ascending'
                }
            }
            else {
                $ListView.Tag.sortOrder = $SortOrder
            }
			
            $ListView.Tag.column = $ColumnIndex
            $ListView.Sort() #Sort the items
        }
        else {
            if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None) {
                $SortOrder = [System.Windows.Forms.SortOrder]::Ascending
            }
			
            #Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
            $ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
            $ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
        }
    }
    function Add-ListViewItem {
        <#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
        Param( 
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.ListView]$ListView,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Items,
            [int]$ImageIndex = -1,
            [string[]]$SubItems,
            $Group,
            [switch]$Clear)
		
        if ($Clear) {
            $ListView.Items.Clear();
        }
	    
        $lvGroup = $null
        if ($Group -is [System.Windows.Forms.ListViewGroup]) {
            $lvGroup = $Group
        }
        elseif ($Group -is [string]) {
            #$lvGroup = $ListView.Group[$Group] # Case sensitive
            foreach ($groupItem in $ListView.Groups) {
                if ($groupItem.Name -eq $Group) {
                    $lvGroup = $groupItem
                    break
                }
            }
	        
            if ($null -eq $lvGroup) {
                $lvGroup = $ListView.Groups.Add($Group, $Group)
            }
        }
	    
        if ($Items -is [Array]) {
            $ListView.BeginUpdate()
            foreach ($item in $Items) {		
                $listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
                #Store the object in the Tag
                $listitem.Tag = $item
				
                if ($null -ne $SubItems) {
                    $listitem.SubItems.AddRange($SubItems)
                }
				
                if ($null -ne $lvGroup) {
                    $listitem.Group = $lvGroup
                }
            }
            $ListView.EndUpdate()
        }
        else {
            #Add a new item to the ListView
            $listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
            #Store the object in the Tag
            $listitem.Tag = $Items
			
            if ($null -ne $SubItems) {
                $listitem.SubItems.AddRange($SubItems)
            }
			
            if ($null -ne $lvGroup) {
                $listitem.Group = $lvGroup
            }
        }
    }
    function Update-ListBox {
        <#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
			
		.PARAMETER ValueMember
			Indicates the property to use for the value of the control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
        param
        (
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            [System.Windows.Forms.ListBox]
            $ListBox,
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            $Items,
            [Parameter(Mandatory = $false)]
            [string]$DisplayMember,
            [Parameter(Mandatory = $false)]
            [string]$ValueMember,
            [switch]
            $Append
        )
		
        if (-not $Append) {
            $ListBox.Items.Clear()
        }
		
        if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection]) {
            $ListBox.Items.AddRange($Items)
        }
        elseif ($Items -is [System.Collections.IEnumerable]) {
            $ListBox.BeginUpdate()
            foreach ($obj in $Items) {
                $ListBox.Items.Add($obj)
            }
            $ListBox.EndUpdate()
        }
        else {
            $ListBox.Items.Add($Items)
        }
		
        if ($DisplayMember) {
            $ListBox.DisplayMember = $DisplayMember
        }
        if ($ValueMember) {
            $ListBox.ValueMember = $ValueMember
        }
    }
    function Update-ToolStripComboBox {
        <#
		.SYNOPSIS
			This functions helps you load items into a ToolStripComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ToolStripComboBox control.
		
		.PARAMETER ToolStripComboBox
			The ToolStripComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ToolStripComboBox's Items collection.
		
		.PARAMETER Append
			Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
			Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
		
		.NOTES
			Additional information about the function.
	#>
		
        param
        (
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            [System.Windows.Forms.ToolStripComboBox]
            $ToolStripComboBox,
            [Parameter(Mandatory = $true)]
            [ValidateNotNull()]
            $Items,
            [switch]
            $Append
        )
		
        if (-not $Append) {
            $ToolStripComboBox.Items.Clear()
        }
		
        if ($Items -is [Object[]]) {
            $ToolStripComboBox.Items.AddRange($Items)
        }
        elseif ($Items -is [Array]) {
            $ToolStripComboBox.BeginUpdate()
            foreach ($obj in $Items) {
                $ToolStripComboBox.Items.Add($obj)
            }
            $ToolStripComboBox.EndUpdate()
        }
        else {
            $ToolStripComboBox.Items.Add($Items)
        }
    }
    function Update-DataGridView {
        <#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
        Param (
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            [System.Windows.Forms.DataGridView]$DataGridView,
            [ValidateNotNull()]
            [Parameter(Mandatory = $true)]
            $Item,
            [Parameter(Mandatory = $false)]
            [string]$DataMember,
            [System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
        )
        $DataGridView.SuspendLayout()
        $DataGridView.DataMember = $DataMember
		
        if ($null -eq $Item) {
            $DataGridView.DataSource = $null
        }
        elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0) {
            $DataGridView.DataSource = $Item.Tables[0]
        }
        elseif ($Item -is [System.ComponentModel.IListSource]`
                -or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] ) {
            $DataGridView.DataSource = $Item
        }
        else {
            $array = New-Object System.Collections.ArrayList
			
            if ($Item -is [System.Collections.IList]) {
                $array.AddRange($Item)
            }
            else {
                $array.Add($Item)
            }
            $DataGridView.DataSource = $array
        }
		
        if ($AutoSizeColumns -ne 'None') {
            $DataGridView.AutoResizeColumns($AutoSizeColumns)
        }
		
        $DataGridView.ResumeLayout()
    }
    function ConvertTo-DataTable {
        <#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterCIMProperties
				This switch removes CIM properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
        [OutputType([System.Data.DataTable])]
        param(
            $InputObject, 
            [ValidateNotNull()]
            [System.Data.DataTable]$Table,
            [switch]$RetainColumns,
            [switch]$FilterCIMProperties)
		
        if ($null -eq $Table) {
            $Table = New-Object System.Data.DataTable
        }
		
        if ($null -eq $InputObject) {
            $Table.Clear()
            return @( , $Table)
        }
		
        if ($InputObject -is [System.Data.DataTable]) {
            $Table = $InputObject
        }
        elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0) {
            $Table = $InputObject.Tables[0]
        }
        else {
            if (-not $RetainColumns -or $Table.Columns.Count -eq 0) {
                #Clear out the Table Contents
                $Table.Clear()
				
                if ($null -eq $InputObject) { return } #Empty Data
				
                $object = $null
                #find the first non null value
                foreach ($item in $InputObject) {
                    if ($null -ne $item) {
                        $object = $item
                        break
                    }
                }
				
                if ($null -eq $object) { return } #All null then empty
				
                #Get all the properties in order to create the columns
                foreach ($prop in $object.PSObject.Get_Properties()) {
                    if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) { #filter out CIM properties
                        #Get the type from the Definition string
                        $type = $null
						
                        if ($null -ne $prop.Value) {
                            try { $type = $prop.Value.GetType() }
                            catch { Out-Null }
                        }
						
                        if ($null -ne $type) { # -and [System.Type]::GetTypeCode($type) -ne 'Object')
                            [void]$table.Columns.Add($prop.Name, $type)
                        }
                        else { #Type info not found
                            [void]$table.Columns.Add($prop.Name)
                        }
                    }
                }
				
                if ($object -is [System.Data.DataRow]) {
                    foreach ($item in $InputObject) {
                        $Table.Rows.Add($item)
                    }
                    return @( , $Table)
                }
            }
            else {
                $Table.Rows.Clear()
            }
			
            foreach ($item in $InputObject) {
                $row = $table.NewRow()
				
                if ($item) {
                    foreach ($prop in $item.PSObject.Get_Properties()) {
                        if ($table.Columns.Contains($prop.Name)) {
                            $row.Item($prop.Name) = $prop.Value
                        }
                    }
                }
                [void]$table.Rows.Add($row)
            }
        }
		
        return @(, $Table)
    }
    function get-Fullscript {
        Invoke-WebRequest -UseBasicParsing -Uri $selectedFull.script.Source_URL
		
    }
    #endregion
	
	
	
	
    $scriptsAvail_SelectedIndexChanged = {
        #TODO: Place custom script here
        $scriptSelected = $scriptsAvail.SelectedItem
        $script:selectedFull = ($script:ScriptArray) | where -Property Script -match $scriptsAvail.SelectedItem
        $propertygrid1.SelectedObject = $selectedFull.Script
        $newArray = New-Object System.Collections.ArrayList
        $selectedFull | select inputs, output, script | foreach {
            $thisItem = $_
            $newArray.Add($thisItem)
        }
        $lbl_scriptname.text = $selectedFull.Script.Name
        $lbl_fullScript.text = get-fullscript
        $lbl_risk.text = $selectedFull.Script.Risk
        $lbl_runs.text = $selectedFull.Script.Runs
        $lblRating.text = $selectedFull.Script.Rating
        $lblDescription.text = $selectedFull.Script.Description
        $lbl_scriptcontact.text = $selectedFull.Script.Maker
    }
	
    $propertygrid1_SelectedGridItemChanged = [System.Windows.Forms.SelectedGridItemChangedEventHandler] {
        #Event Argument: $_ = [System.Windows.Forms.SelectedGridItemChangedEventArgs]
        #TODO: Place custom script here
        $rtb_selection.Text = $propertygrid1.SelectedGridItem.PropertyValue
    }
	
    $btn_executionPrepare_Click = {
        if ($ConstructForm) { $ConstructForm.Dispose() }
        [System.Windows.Forms.Application]::EnableVisualStyles()
		
        $ConstructForm = New-Object 'System.Windows.Forms.Form'
        $buttonExportLogs = New-Object 'System.Windows.Forms.Button'
        $buttonExecute = New-Object 'System.Windows.Forms.Button'
        $richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
        $panel1 = New-Object 'System.Windows.Forms.Panel'
        $buttonDone = New-Object 'System.Windows.Forms.Button'
        $buttonCancel = New-Object 'System.Windows.Forms.Button'
        $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
        $buttonDebug = New-Object 'System.Windows.Forms.Button'
        #endregion Generated Form Objects
        #
        # ConstructForm
        #
        $ConstructForm.Controls.Add($buttonExportLogs)
        $ConstructForm.Controls.Add($buttonExecute)
        $ConstructForm.Controls.Add($richtextbox1)
        $ConstructForm.Controls.Add($panel1)
        $ConstructForm.Controls.Add($buttonDone)
        $ConstructForm.Controls.Add($buttonCancel)
        $ConstructForm.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
        $ConstructForm.AutoScaleMode = 'Font'
        $ConstructForm.ClientSize = New-Object System.Drawing.Size(843, 704)
        $ConstructForm.Margin = '4, 4, 4, 4'
        $ConstructForm.Name = 'ConstructForm'
        $ConstructForm.RightToLeft = 'No'
        $ConstructForm.StartPosition = 'CenterParent'
        $ConstructForm.Text = 'Form Constructor'
        $ConstructForm.add_Load($formPrepareScript_Load)
        #
        # buttonExportLogs
        #
        $buttonExportLogs.Location = New-Object System.Drawing.Point(29, 659)
        $buttonExportLogs.Name = 'buttonExportLogs'
        $buttonExportLogs.Size = New-Object System.Drawing.Size(87, 32)
        $buttonExportLogs.TabIndex = 5
        $buttonExportLogs.Text = 'ExportLogs'
        $buttonExportLogs.UseVisualStyleBackColor = $True
        $buttonExportLogs.add_Click($buttonExportLogs_Click)
        #
        # buttondebug
        #

        #
        # buttonExecute
        #
        $buttonExecute.Font = [System.Drawing.Font]::new('Tahoma', '18', [System.Drawing.FontStyle]'Bold')
        $buttonExecute.Location = New-Object System.Drawing.Point(337, 658)
        $buttonExecute.Name = 'buttonExecute'
        $buttonExecute.Size = New-Object System.Drawing.Size(149, 34)
        $buttonExecute.TabIndex = 4
        $buttonExecute.Text = 'Execute Now'
        $buttonExecute.UseVisualStyleBackColor = $True
        $buttonExecute.add_Click($buttonExecute_Click)
        #
        # richtextbox1
        #
        $richtextbox1.Location = New-Object System.Drawing.Point(79, 436)
        $richtextbox1.Name = 'richtextbox1'
        $richtextbox1.Size = New-Object System.Drawing.Size(689, 208)
        $richtextbox1.TabIndex = 3
        $richtextbox1.Text = ''
        #
        # panel1
        #
        $panel1.Location = New-Object System.Drawing.Point(23, 14)
        $panel1.Name = 'panel1'
        $panel1.Size = New-Object System.Drawing.Size(783, 416)
        $panel1.TabIndex = 2
        #
        # buttonDone
        #
        $buttonDone.Anchor = 'Bottom, Right'
        $buttonDone.DialogResult = 'OK'
        $buttonDone.Location = New-Object System.Drawing.Point(675, 669)
        $buttonDone.Name = 'buttonDone'
        $buttonDone.Size = New-Object System.Drawing.Size(75, 23)
        $buttonDone.TabIndex = 1
        $buttonDone.Text = '&Done'
        $buttonDone.UseCompatibleTextRendering = $True
        $buttonDone.UseVisualStyleBackColor = $True
        #
        # buttonCancel
        #
        $buttonCancel.Anchor = 'Bottom, Right'
        $buttonCancel.CausesValidation = $False
        $buttonCancel.DialogResult = 'Cancel'
        $buttonCancel.Location = New-Object System.Drawing.Point(756, 669)
        $buttonCancel.Name = 'buttonCancel'
        $buttonCancel.Size = New-Object System.Drawing.Size(75, 23)
        $buttonCancel.TabIndex = 0
        $buttonCancel.Text = '&Cancel'
        $buttonCancel.UseCompatibleTextRendering = $True
        $buttonCancel.UseVisualStyleBackColor = $True
		
        $global:InputControls = @{ }
        $buildThis = $script:ScriptArray | where -Property Script -Match $scriptsAvail.SelectedItem
        $i = -1
        $existingNames = @{ }
        $verticalOffset = 0
        foreach ($item in $buildThis.inputs) {
            $baseName = $item.name
            $uniqueName = $baseName
            $counter = 1
			
            while ($existingNames.ContainsKey($uniqueName)) {
                $uniqueName = "$baseName$counter"
                $counter++
            }
			
            $existingNames[$uniqueName] = $true
			
			
            # Set common top offset
            $top = 20 + $verticalOffset
			
            # Draw label
            $label = New-Object System.Windows.Forms.Label
            $label.Text = $item.label
            $label.AutoSize = $true
            $label.Font = [System.Drawing.Font]::new('Tahoma', 9)
            $label.Location = New-Object System.Drawing.Point(10, $top)
            $label.Name = 'label_' + $uniqueName
            $panel1.Controls.Add($label)
			
            # Move down for the control
            $top += 20
					
    <#        $buttonExecute.add_Click({
                    $inputValues = Get-DynamicFormInputs -ControlMap $global:InputControls -Panel $panel1
							
                    # Optional: dump to console or richtextbox for debugging
                    $richtextbox1.Clear()
                    foreach ($key in $inputValues.Keys) {
                        $value = $inputValues[$key]
                        if ($value -is [System.Collections.IEnumerable] -and -not ($value -is [string])) {
                            $value = ($value -join ', ')
                        }
                        $richtextbox1.AppendText("$key : $value`n")
                    }
                    $scriptGrabber = new-object System.Net.WebClient
                    $scriptgrabber.Headers.add('Cache-Control: no-cache')
                    $scriptgrabber.CachePolicy = [System.Net.Cache.RequestCachePolicy]::new([System.ServiceModel.CacheSetting]::AlwaysOn)
                    $i = 0
                    foreach ($inputvalue in $inputvalues) {
                        $i++
                        Set-Variable -Name $i -Value $inputValues.values[$i - 1]

                    }
                    $results = Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ($scriptGrabber.DownloadString($script:selectedFull.script.source_url))
                    # Your script execution logic goes here...
                    foreach ($line in $results) {
                        $logbox.appendtext($line + "`n")

                    }
                    # Run-DynamicScript -Inputs $inputValues
                })
                    #>
            switch ($item.ControlType.ToLower()) {
                "textbox" {
                    $textbox = New-Object System.Windows.Forms.TextBox
                    $textbox.Name = $uniqueName
                    $textbox.Text = $item.default
                    $textbox.Location = New-Object System.Drawing.Point(10, $top)
                    $panel1.Controls.Add($textbox)
                    $control = $textbox
                    $verticalOffset += 40
                }
				
                "checkedlistbox" {
                    $clb = New-Object System.Windows.Forms.CheckedListBox
                    $clb.Name = $uniqueName
                    $clb.Size = New-Object System.Drawing.Size(400, 100)
                    $clb.Location = New-Object System.Drawing.Point(10, $top)
                    $clb.DisplayMember = "Label"
                    foreach ($choice in $item.items) { $clb.Items.Add($choice) }
                    $panel1.Controls.Add($clb)
                    $control = $clb
                    $verticalOffset += 120 # allow for height of list
                }
				
                "combobox" {
                    $combo = New-Object System.Windows.Forms.ComboBox
                    $combo.Name = 'cb_' + $uniqueName
                    $combo.Size = New-Object System.Drawing.Size(300, 20)
                    $combo.Location = New-Object System.Drawing.Point(10, $top)
                    foreach ($choice in $item.items) { $combo.Items.Add($choice) }
                    $verticalOffset += 40
                    $combo.add_SelectedIndexChanged({
                            # Remove previous branch control if present
                            if ($panel1.Controls["branchControl"]) {
                                $panel1.Controls.RemoveByKey("branchControl")
                            }
							
                            $selected = $combo.SelectedItem
                            if ($item.branches.$selected) {
                                $branch = $item.branches.$selected
								
                                switch ($branch.ControlType.ToLower()) {
                                    "textbox" {
                                        $tb = New-Object System.Windows.Forms.TextBox
                                        $tb.Name = "branchControl"
                                        $tb.Text = ""
                                        $tb.Location = New-Object System.Drawing.Point(320, $combo.Location.Y)
                                        $panel1.Controls.Add($tb)
                                        $global:InputControls[$uniqueName] = 'branch_' + $item.ControlType.ToLower()
                                    }
                                    "datetimepicker" {
                                        $dtp = New-Object System.Windows.Forms.DateTimePicker
                                        $dtp.Name = "branchControl"
                                        $dtp.Format = [System.Windows.Forms.DateTimePickerFormat]::Short
                                        $dtp.Location = New-Object System.Drawing.Point(320, $combo.Location.Y)
                                        $global:InputControls[$uniqueName] = 'branch_' + $item.ControlType.ToLower()
                                        $panel1.Controls.Add($dtp)
                                    }
                                }
                            }
                        })
                    $panel1.Controls.Add($combo)
                    $control = $combo
                    $verticalOffset += 40
					
                }
				
                "datetimepicker" {
                    $dtp = New-Object System.Windows.Forms.DateTimePicker
                    $dtp.Name = 'dtp_' + $uniquename
                    $dtp.Format = [System.Windows.Forms.DateTimePickerFormat]::Custom
                    $dtp.CustomFormat = "yyyy-MM-dd HH:mm:ss"
                    $dtp.Size = New-Object System.Drawing.Size(200, 20)
                    $dtp.Location = New-Object System.Drawing.Point(10, $top)
                    $panel1.Controls.Add($dtp)
                    $global:InputControls[$uniqueName] = $item.ControlType.ToLower()
                    $control = $dtp
                    $verticalOffset += 40
                }
				
                "datagridview" {
                    $grid = New-Object System.Windows.Forms.DataGridView
                    $grid.Name = 'dgv_' + $uniqueName
                    $grid.Size = New-Object System.Drawing.Size(700, 200)
                    $grid.Location = New-Object System.Drawing.Point(10, $top)
                    $grid.AllowUserToAddRows = $false
                    $grid.AllowUserToDeleteRows = $false
                    $grid.ReadOnly = $true
                    $panel1.Controls.Add($grid)
                    $global:InputControls[$uniqueName] = $item.ControlType.ToLower()
                    $control = $grid
                    $verticalOffset += 220
                }
				
            }
            $global:InputControls[$uniqueName] = $control
        }
		
		
        $ConstructForm.ResumeLayout()
		
        $ConstructForm.ShowDialog()
    }
	
	
    $lbl_fullScript_Click = {
        #TODO: Place custom script here
        if ($lbl_fullScript.Text -match 'https://') {
            $thisFullScript = Invoke-WebRequest -UseBasicParsing -Uri $lbl_fullScript.Text
            $rtb_selection.Clear()
            $rtb_selection.Text = $thisfullscript
			
        }
    }
	
    $labelScriptExecutionAutom_Click = {
        #TODO: Place custom script here
		
    }
	
    $lbl_scriptcontact_Click = {
        #TODO: Place custom script here
		
    }
	
	
	
	
    $buttonReviewScript_Click = {
        #TODO: Place custom script here
		
        $scriptForm = New-Object 'System.Windows.Forms.Form'
        $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
        $rtb_script = New-Object 'System.Windows.Forms.RichTextBox'
        $buttonQ = New-Object 'System.Windows.Forms.Button'
        $scriptForm.Controls.Add($rtb_Script)
        $scriptForm.Controls.Add($buttonQ)
        $scriptForm.SuspendLayout()
		
        $scriptForm.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
        $scriptForm.AutoScaleMode = 'Font'
        $scriptForm.ClientSize = New-Object System.Drawing.Size(843, 704)
        $scriptForm.Margin = '4, 4, 4, 4'
        $scriptForm.Name = 'ScriptViewWindow'
        $scriptForm.RightToLeft = 'No'
        $scriptForm.StartPosition = 'CenterParent'
        $scriptForm.Text = 'Script Review Window'
        $rtb_script.Location = New-Object System.Drawing.Point(0, 0)
        $rtb_script.Name = 'rtb_script'
        $rtb_script.Size = New-Object System.Drawing.Size(650, 700)
        $rtb_script.TabIndex = 3
        $rtb_script.Text = get-Fullscript
        $buttonQ.DialogResult = 'OK'
        $buttonQ.Location = New-Object System.Drawing.Point(750, 650)
        $buttonQ.Name = 'buttonDone'
        $buttonQ.Size = New-Object System.Drawing.Size(91, 29)
        $buttonQ.TabIndex = 1
        $buttonQ.Text = '&Done'
        $rtb_script.add_CLick{
            HOSTNAME
        }
        $scriptForm.ResumeLayout()
        $scriptForm.ShowDialog()
		
    }
	
	
    $lbl_fullScript_Click = {
        #TODO: Place custom script here
        if ($lbl_fullScript.Text -match 'https://') {
            $thisFullScript = Invoke-WebRequest -UseBasicParsing -Uri $lbl_fullScript.Text
            $rtb_selection.Clear()
            $rtb_selection.Text = $thisfullscript
			
        }
    }
	
    $labelScriptExecutionAutom_Click = {
        #TODO: Place custom script here
		
    }
	
    $lbl_scriptcontact_Click = {
        #TODO: Place custom script here
		
    }
	
	
	
	
    $buttonReviewScript_Click = {
        #TODO: Place custom script here
		
        $scriptForm = New-Object 'System.Windows.Forms.Form'
        $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
        $rtb_script = New-Object 'System.Windows.Forms.RichTextBox'
        $buttonQ = New-Object 'System.Windows.Forms.Button'
        $scriptForm.Controls.Add($rtb_Script)
        $scriptForm.Controls.Add($buttonQ)
        $scriptForm.SuspendLayout()
		
        $scriptForm.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
        $scriptForm.AutoScaleMode = 'Font'
        $scriptForm.ClientSize = New-Object System.Drawing.Size(843, 704)
        $scriptForm.Margin = '4, 4, 4, 4'
        $scriptForm.Name = 'ScriptViewWindow'
        $scriptForm.RightToLeft = 'No'
        $scriptForm.StartPosition = 'CenterParent'
        $scriptForm.Text = 'Script Review Window'
        $rtb_script.Location = New-Object System.Drawing.Point(0, 0)
        $rtb_script.Name = 'rtb_script'
        $rtb_script.Size = New-Object System.Drawing.Size(650, 700)
        $rtb_script.TabIndex = 3
        $rtb_script.Text = get-Fullscript
        $buttonQ.DialogResult = 'OK'
        $buttonQ.Location = New-Object System.Drawing.Point(750, 650)
        $buttonQ.Name = 'buttonDone'
        $buttonQ.Size = New-Object System.Drawing.Size(91, 29)
        $buttonQ.TabIndex = 1
        $buttonQ.Text = '&Done'
        $rtb_script.add_CLick{
            HOSTNAME
        }
        $scriptForm.ResumeLayout()
        $scriptForm.ShowDialog()
	
    }
		
	
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load =
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $formScriptExecution.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing =
    {
        #Store the control values
        $script:_textbox1 = $textbox1.Text
        $script:_rtb_selection = $rtb_selection.Text
        $script:_scriptsAvail = $scriptsAvail.SelectedItems
    }

	
    $Form_Cleanup_FormClosed =
    {
        #Remove all event handlers from the controls
        try {
            $buttonReviewScript.remove_Click($buttonReviewScript_Click)
            $lbl_scriptcontact.remove_Click($lbl_scriptcontact_Click)
            $btn_executionPrepare.remove_Click($btn_executionPrepare_Click)
            $propertygrid1.remove_SelectedGridItemChanged($propertygrid1_SelectedGridItemChanged)
            $scriptsAvail.remove_SelectedIndexChanged($scriptsAvail_SelectedIndexChanged)
            $formScriptExecutionArcad.remove_Load($formScriptExecutionArcad_Load)
            $formScriptExecutionArcad.remove_Load($Form_StateCorrection_Load)
            $formScriptExecutionArcad.remove_Closing($Form_StoreValues_Closing)
            $formScriptExecutionArcad.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $formScriptExecutionArcad.SuspendLayout()
    $MainPanel.SuspendLayout()
    $panel1.SuspendLayout()
    $statusstrip1.SuspendLayout()

    $splitcontainer1.BeginInit()
    $splitcontainer1.SuspendLayout()
    #
    # formScriptExecutionArcad
    #
    $formScriptExecutionArcad.Controls.Add($MainPanel)
    $formScriptExecutionArcad.Controls.Add($labelScriptExecutionAutom)
    $formScriptExecutionArcad.AccessibleRole = 'Window'
    $formScriptExecutionArcad.AutoScaleMode = 'None'
    $formScriptExecutionArcad.BackColor = [System.Drawing.Color]::DimGray 
    $formScriptExecutionArcad.ClientSize = New-Object System.Drawing.Size(951, 724)
    $formScriptExecutionArcad.FormBorderStyle = 'Fixed3D'
    $formScriptExecutionArcad.Name = 'formScriptExecutionArcad'
    $formScriptExecutionArcad.SizeGripStyle = 'Hide'
    $formScriptExecutionArcad.StartPosition = 'CenterParent'
    $formScriptExecutionArcad.Text = 'Script Execution Arcade'
    $formScriptExecutionArcad.add_Load($formScriptExecutionArcad_Load)
    #
    # MainPanel
    #
    $MainPanel.Controls.Add($buttonExportForLocalExecut)
    $MainPanel.Controls.Add($buttonsettings)
    $MainPanel.Controls.Add($buttonReviewScript)
    $MainPanel.Controls.Add($panel1)
    $MainPanel.Controls.Add($textbox1)
    $MainPanel.Controls.Add($btn_executionPrepare)
    $MainPanel.Controls.Add($buttonQuit)
    $MainPanel.Controls.Add($rtb_selection)
    $MainPanel.Controls.Add($propertygrid1)
    $MainPanel.Controls.Add($scriptsAvail)
    $MainPanel.Location = New-Object System.Drawing.Point(0, 83)
    $MainPanel.Name = 'MainPanel'
    $MainPanel.Size = New-Object System.Drawing.Size(951, 639)
    $MainPanel.TabIndex = 24
    #
    # buttonExportForLocalExecut
    #
    $buttonExportForLocalExecut.BackColor = [System.Drawing.Color]::SeaGreen 
    $buttonExportForLocalExecut.FlatAppearance.BorderColor = [System.Drawing.Color]::Black 
    $buttonExportForLocalExecut.FlatAppearance.BorderSize = 4
    $buttonExportForLocalExecut.FlatAppearance.MouseDownBackColor = [System.Drawing.Color]::Silver 
    $buttonExportForLocalExecut.FlatAppearance.MouseOverBackColor = [System.Drawing.Color]::FromArgb(255, 255, 255, 192)
    $buttonExportForLocalExecut.Font = [System.Drawing.Font]::new('Tahoma', '12', [System.Drawing.FontStyle]'Bold')
    $buttonExportForLocalExecut.Location = New-Object System.Drawing.Point(791, 217)
    $buttonExportForLocalExecut.Name = 'buttonExportForLocalExecut'
    $buttonExportForLocalExecut.Size = New-Object System.Drawing.Size(160, 68)
    $buttonExportForLocalExecut.TabIndex = 28
    $buttonExportForLocalExecut.Text = 'Export for Local Execution'
    $buttonExportForLocalExecut.UseVisualStyleBackColor = $False
    #
    # buttonsettings
    #
    $buttonsettings.Location = New-Object System.Drawing.Point(856, 609)
    $buttonsettings.Name = 'buttonsettings'
    $buttonsettings.Size = New-Object System.Drawing.Size(91, 29)
    $buttonsettings.TabIndex = 27
    $buttonsettings.Text = 'buttonsettings'
    $buttonsettings.UseVisualStyleBackColor = $True
    #
    # buttonReviewScript
    #
    $buttonReviewScript.Location = New-Object System.Drawing.Point(675, 383)
    $buttonReviewScript.Name = 'buttonReviewScript'
    $buttonReviewScript.Size = New-Object System.Drawing.Size(98, 20)
    $buttonReviewScript.TabIndex = 26
    $buttonReviewScript.Text = 'ReviewScript'
    $buttonReviewScript.UseVisualStyleBackColor = $True
    $buttonReviewScript.add_Click($buttonReviewScript_Click)
    #
    # panel1
    #
    $panel1.Controls.Add($lbl_fullScript)
    $panel1.Controls.Add($lblDescription)
    $panel1.Controls.Add($lblRating)
    $panel1.Controls.Add($labelFullScript)
    $panel1.Controls.Add($labelDescription)
    $panel1.Controls.Add($labelRisk)
    $panel1.Controls.Add($lbl_runs)
    $panel1.Controls.Add($lbl_risk)
    $panel1.Controls.Add($labelRuns)
    $panel1.Controls.Add($labelRating)
    $panel1.Controls.Add($lbl_scriptcontact)
    $panel1.Controls.Add($labelContact)
    $panel1.Controls.Add($lbl_scriptname)
    $panel1.Controls.Add($labelScriptName)
    $panel1.Controls.Add($labelScript)
    $panel1.Controls.Add($statusstrip1)
    $panel1.AutoScroll = $True
    $panel1.BackColor = [System.Drawing.Color]::LightCoral 
    $panel1.BorderStyle = 'Fixed3D'
    $panel1.Location = New-Object System.Drawing.Point(319, 12)
    $panel1.Name = 'panel1'
    $panel1.Size = New-Object System.Drawing.Size(469, 366)
    $panel1.TabIndex = 23
    #
    # lbl_fullScript
    #
    $lbl_fullScript.AutoSize = $True
    $lbl_fullScript.BackColor = [System.Drawing.Color]::LightSalmon 
    $lbl_fullScript.BorderStyle = 'FixedSingle'
    $lbl_fullScript.FlatStyle = 'Popup'
    $lbl_fullScript.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lbl_fullScript.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lbl_fullScript.Location = New-Object System.Drawing.Point(139, 175)
    $lbl_fullScript.Name = 'lbl_fullScript'
    $lbl_fullScript.Size = New-Object System.Drawing.Size(53, 21)
    $lbl_fullScript.TabIndex = 17
    $lbl_fullScript.Text = 'label1'
    #
    # lblDescription
    #
    $lblDescription.AutoSize = $True
    $lblDescription.BackColor = [System.Drawing.Color]::LightSalmon 
    $lblDescription.BorderStyle = 'FixedSingle'
    $lblDescription.FlatStyle = 'Popup'
    $lblDescription.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lblDescription.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lblDescription.Location = New-Object System.Drawing.Point(139, 151)
    $lblDescription.Name = 'lblDescription'
    $lblDescription.Size = New-Object System.Drawing.Size(53, 21)
    $lblDescription.TabIndex = 16
    $lblDescription.Text = 'label1'
    #
    # lblRating
    #
    $lblRating.AutoSize = $True
    $lblRating.BackColor = [System.Drawing.Color]::LightSalmon 
    $lblRating.BorderStyle = 'FixedSingle'
    $lblRating.FlatStyle = 'Popup'
    $lblRating.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lblRating.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lblRating.Location = New-Object System.Drawing.Point(139, 103)
    $lblRating.Name = 'lblRating'
    $lblRating.Size = New-Object System.Drawing.Size(53, 21)
    $lblRating.TabIndex = 15
    $lblRating.Text = 'label1'
    #
    # labelFullScript
    #
    $labelFullScript.AutoSize = $True
    $labelFullScript.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelFullScript.BorderStyle = 'FixedSingle'
    $labelFullScript.FlatStyle = 'Popup'
    $labelFullScript.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelFullScript.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelFullScript.Location = New-Object System.Drawing.Point(14, 175)
    $labelFullScript.Name = 'labelFullScript'
    $labelFullScript.Size = New-Object System.Drawing.Size(76, 21)
    $labelFullScript.TabIndex = 14
    $labelFullScript.Text = 'FullScript'
    #
    # labelDescription
    #
    $labelDescription.AutoSize = $True
    $labelDescription.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelDescription.BorderStyle = 'FixedSingle'
    $labelDescription.FlatStyle = 'Popup'
    $labelDescription.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelDescription.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelDescription.Location = New-Object System.Drawing.Point(14, 151)
    $labelDescription.Name = 'labelDescription'
    $labelDescription.Size = New-Object System.Drawing.Size(90, 21)
    $labelDescription.TabIndex = 13
    $labelDescription.Text = 'Description'
    #
    # labelRisk
    #
    $labelRisk.AutoSize = $True
    $labelRisk.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelRisk.BorderStyle = 'FixedSingle'
    $labelRisk.FlatStyle = 'Popup'
    $labelRisk.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelRisk.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelRisk.Location = New-Object System.Drawing.Point(14, 127)
    $labelRisk.Name = 'labelRisk'
    $labelRisk.Size = New-Object System.Drawing.Size(40, 21)
    $labelRisk.TabIndex = 12
    $labelRisk.Text = 'Risk'
    #
    # lbl_runs
    #
    $lbl_runs.AutoSize = $True
    $lbl_runs.BackColor = [System.Drawing.Color]::LightSalmon 
    $lbl_runs.BorderStyle = 'FixedSingle'
    $lbl_runs.FlatStyle = 'Popup'
    $lbl_runs.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lbl_runs.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lbl_runs.Location = New-Object System.Drawing.Point(139, 79)
    $lbl_runs.Name = 'lbl_runs'
    $lbl_runs.Size = New-Object System.Drawing.Size(53, 21)
    $lbl_runs.TabIndex = 11
    $lbl_runs.Text = 'label1'
    #
    # lbl_risk
    #
    $lbl_risk.AutoSize = $True
    $lbl_risk.BackColor = [System.Drawing.Color]::LightSalmon 
    $lbl_risk.BorderStyle = 'FixedSingle'
    $lbl_risk.FlatStyle = 'Popup'
    $lbl_risk.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lbl_risk.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lbl_risk.Location = New-Object System.Drawing.Point(139, 127)
    $lbl_risk.Name = 'lbl_risk'
    $lbl_risk.Size = New-Object System.Drawing.Size(53, 21)
    $lbl_risk.TabIndex = 10
    $lbl_risk.Text = 'label1'
    #
    # labelRuns
    #
    $labelRuns.AutoSize = $True
    $labelRuns.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelRuns.BorderStyle = 'FixedSingle'
    $labelRuns.FlatStyle = 'Popup'
    $labelRuns.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelRuns.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelRuns.Location = New-Object System.Drawing.Point(14, 79)
    $labelRuns.Name = 'labelRuns'
    $labelRuns.Size = New-Object System.Drawing.Size(46, 21)
    $labelRuns.TabIndex = 9
    $labelRuns.Text = 'Runs'
    #
    # labelRating
    #
    $labelRating.AutoSize = $True
    $labelRating.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelRating.BorderStyle = 'FixedSingle'
    $labelRating.FlatStyle = 'Popup'
    $labelRating.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelRating.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelRating.Location = New-Object System.Drawing.Point(14, 103)
    $labelRating.Name = 'labelRating'
    $labelRating.Size = New-Object System.Drawing.Size(56, 21)
    $labelRating.TabIndex = 8
    $labelRating.Text = 'Rating'
    #
    # lbl_scriptcontact
    #
    $lbl_scriptcontact.AutoSize = $True
    $lbl_scriptcontact.BackColor = [System.Drawing.Color]::LightSalmon 
    $lbl_scriptcontact.BorderStyle = 'FixedSingle'
    $lbl_scriptcontact.FlatStyle = 'Popup'
    $lbl_scriptcontact.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lbl_scriptcontact.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lbl_scriptcontact.Location = New-Object System.Drawing.Point(139, 55)
    $lbl_scriptcontact.Name = 'lbl_scriptcontact'
    $lbl_scriptcontact.Size = New-Object System.Drawing.Size(53, 21)
    $lbl_scriptcontact.TabIndex = 7
    $lbl_scriptcontact.Text = 'label1'
    $lbl_scriptcontact.add_Click($lbl_scriptcontact_Click)
    #
    # labelContact
    #
    $labelContact.AutoSize = $True
    $labelContact.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelContact.BorderStyle = 'FixedSingle'
    $labelContact.FlatStyle = 'Popup'
    $labelContact.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelContact.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelContact.Location = New-Object System.Drawing.Point(14, 55)
    $labelContact.Name = 'labelContact'
    $labelContact.Size = New-Object System.Drawing.Size(64, 21)
    $labelContact.TabIndex = 6
    $labelContact.Text = 'Contact'
    #
    # lbl_scriptname
    #
    $lbl_scriptname.AutoSize = $True
    $lbl_scriptname.BackColor = [System.Drawing.Color]::LightSalmon 
    $lbl_scriptname.BorderStyle = 'FixedSingle'
    $lbl_scriptname.FlatStyle = 'Popup'
    $lbl_scriptname.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $lbl_scriptname.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $lbl_scriptname.Location = New-Object System.Drawing.Point(139, 31)
    $lbl_scriptname.Name = 'lbl_scriptname'
    $lbl_scriptname.Size = New-Object System.Drawing.Size(53, 21)
    $lbl_scriptname.TabIndex = 5
    $lbl_scriptname.Text = 'label1'
    #
    # labelScriptName
    #
    $labelScriptName.AutoSize = $True
    $labelScriptName.BackColor = [System.Drawing.Color]::LightSalmon 
    $labelScriptName.BorderStyle = 'FixedSingle'
    $labelScriptName.FlatStyle = 'Popup'
    $labelScriptName.Font = [System.Drawing.Font]::new('Tahoma', '12')
    $labelScriptName.ForeColor = [System.Drawing.SystemColors]::InactiveCaptionText 
    $labelScriptName.Location = New-Object System.Drawing.Point(14, 31)
    $labelScriptName.Name = 'labelScriptName'
    $labelScriptName.Size = New-Object System.Drawing.Size(92, 21)
    $labelScriptName.TabIndex = 4
    $labelScriptName.Text = 'ScriptName'
    #
    # labelScript
    #
    $labelScript.AutoSize = $True
    $labelScript.BackColor = [System.Drawing.Color]::LightPink 
    $labelScript.BorderStyle = 'Fixed3D'
    $labelScript.FlatStyle = 'Popup'
    $labelScript.Font = [System.Drawing.Font]::new('Tahoma', '12', [System.Drawing.FontStyle]'Bold')
    $labelScript.ForeColor = [System.Drawing.Color]::DodgerBlue 
    $labelScript.LiveSetting = 'Assertive'
    $labelScript.Location = New-Object System.Drawing.Point(48, 7)
    $labelScript.Name = 'labelScript'
    $labelScript.Size = New-Object System.Drawing.Size(58, 21)
    $labelScript.TabIndex = 3
    $labelScript.Text = 'Script'
    #
    # statusstrip1
    #
    $statusstrip1.Location = New-Object System.Drawing.Point(0, 340)
    $statusstrip1.Name = 'statusstrip1'
    $statusstrip1.Size = New-Object System.Drawing.Size(465, 22)
    $statusstrip1.TabIndex = 0
    $statusstrip1.Text = 'statusstrip1'
    #
    # textbox1
    #
    $textbox1.Location = New-Object System.Drawing.Point(432, 384)
    $textbox1.Name = 'textbox1'
    $textbox1.Size = New-Object System.Drawing.Size(224, 20)
    $textbox1.TabIndex = 21
    #
    # btn_executionPrepare
    #
    $btn_executionPrepare.BackColor = [System.Drawing.Color]::SeaGreen 
    $btn_executionPrepare.FlatAppearance.BorderColor = [System.Drawing.Color]::Black 
    $btn_executionPrepare.FlatAppearance.BorderSize = 4
    $btn_executionPrepare.FlatAppearance.MouseDownBackColor = [System.Drawing.Color]::Silver 
    $btn_executionPrepare.FlatAppearance.MouseOverBackColor = [System.Drawing.Color]::FromArgb(255, 255, 255, 192)
    $btn_executionPrepare.Font = [System.Drawing.Font]::new('Tahoma', '12', [System.Drawing.FontStyle]'Bold')
    $btn_executionPrepare.Location = New-Object System.Drawing.Point(144, 568)
    $btn_executionPrepare.Name = 'btn_executionPrepare'
    $btn_executionPrepare.Size = New-Object System.Drawing.Size(160, 68)
    $btn_executionPrepare.TabIndex = 19
    $btn_executionPrepare.Text = 'Prepare Execution'
    $btn_executionPrepare.UseVisualStyleBackColor = $False
    $btn_executionPrepare.add_Click($btn_executionPrepare_Click)
    #
    # buttonQuit
    #
    $buttonQuit.BackColor = [System.Drawing.Color]::DodgerBlue 
    $buttonQuit.BackgroundImageLayout = 'None'
    $buttonQuit.DialogResult = 'Cancel'
    $buttonQuit.FlatAppearance.BorderSize = 4
    $buttonQuit.FlatStyle = 'Flat'
    $buttonQuit.Font = [System.Drawing.Font]::new('Tahoma', '12', [System.Drawing.FontStyle]'Bold')
    $buttonQuit.Location = New-Object System.Drawing.Point(3, 568)
    $buttonQuit.Name = 'buttonQuit'
    $buttonQuit.RightToLeft = 'Yes'
    $buttonQuit.Size = New-Object System.Drawing.Size(135, 68)
    $buttonQuit.TabIndex = 20
    $buttonQuit.Text = 'Quit'
    $buttonQuit.UseVisualStyleBackColor = $False
    #
    # rtb_selection
    #
    $rtb_selection.BackColor = [System.Drawing.SystemColors]::ScrollBar 
    $rtb_selection.HideSelection = $False
    $rtb_selection.Location = New-Object System.Drawing.Point(324, 410)
    $rtb_selection.Name = 'rtb_selection'
    $rtb_selection.ReadOnly = $True
    $rtb_selection.Size = New-Object System.Drawing.Size(467, 214)
    $rtb_selection.TabIndex = 18
    $rtb_selection.Text = ''
    $rtb_selection.WordWrap = $False
    #
    # propertygrid1
    #
    $propertygrid1.CommandsVisibleIfAvailable = $False
    $propertygrid1.HelpVisible = $False
    $propertygrid1.Location = New-Object System.Drawing.Point(12, 454)
    $propertygrid1.Name = 'propertygrid1'
    $propertygrid1.Size = New-Object System.Drawing.Size(304, 108)
    $propertygrid1.TabIndex = 16
    $propertygrid1.ToolbarVisible = $False
    $propertygrid1.add_SelectedGridItemChanged($propertygrid1_SelectedGridItemChanged)
    #
    # scriptsAvail
    #
    $scriptsAvail.BackColor = [System.Drawing.SystemColors]::ScrollBar 
    $scriptsAvail.Font = [System.Drawing.Font]::new('Tahoma', '11.25', [System.Drawing.FontStyle]'Bold')
    $scriptsAvail.FormattingEnabled = $True
    $scriptsAvail.ItemHeight = 18
    $scriptsAvail.Location = New-Object System.Drawing.Point(8, 12)
    $scriptsAvail.Name = 'scriptsAvail'
    $scriptsAvail.Size = New-Object System.Drawing.Size(308, 436)
    $scriptsAvail.TabIndex = 15
    $scriptsAvail.add_SelectedIndexChanged($scriptsAvail_SelectedIndexChanged)
    #

    # labelScriptExecutionAutom
    #
    $labelScriptExecutionAutom.AutoSize = $True
    $labelScriptExecutionAutom.Font = [System.Drawing.Font]::new('Tahoma', '26.25', [System.Drawing.FontStyle]'Bold')
    $labelScriptExecutionAutom.ForeColor = [System.Drawing.SystemColors]::GradientInactiveCaption 
    $labelScriptExecutionAutom.Location = New-Object System.Drawing.Point(3, 27)
    $labelScriptExecutionAutom.Name = 'labelScriptExecutionAutom'
    $labelScriptExecutionAutom.Size = New-Object System.Drawing.Size(522, 42)
    $labelScriptExecutionAutom.TabIndex = 17
    $labelScriptExecutionAutom.Text = 'Script Execution Automation'
    #
    # propertygrid2
    #
    $propertygrid2.CategorySplitterColor = [System.Drawing.SystemColors]::ControlLight 
    $propertygrid2.Font = [System.Drawing.Font]::new('Tahoma', '9.75', [System.Drawing.FontStyle]'Bold')
    $propertygrid2.HelpVisible = $False
    $propertygrid2.Location = New-Object System.Drawing.Point(3, 3)
    $propertygrid2.Name = 'propertygrid2'
    $propertygrid2.Size = New-Object System.Drawing.Size(288, 294)
    $propertygrid2.TabIndex = 0
    $propertygrid2.ToolbarVisible = $False
    $propertygrid2.ViewBackColor = [System.Drawing.Color]::Salmon 
    #
    # splitcontainer1
    #
    $splitcontainer1.Location = New-Object System.Drawing.Point(3, 41)
    $splitcontainer1.Name = 'splitcontainer1'
    [void]$splitcontainer1.Panel2.Controls.Add($propertygrid2)
    $splitcontainer1.Size = New-Object System.Drawing.Size(463, 300)
    $splitcontainer1.SplitterDistance = 154
    $splitcontainer1.TabIndex = 3
    #

    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $formScriptExecutionArcad.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $formScriptExecutionArcad.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $formScriptExecutionArcad.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $formScriptExecutionArcad.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $formScriptExecutionArcad.ShowDialog()

}
#endregion Source: pazwh.psf
		
	
	
	
    $buttonExportLogs_Click = {
        #TODO: Place custom script here
		
    }
	
    $buttonExecute_Click = {
        #TODO: Place custom script here
		  $inputValues = Get-DynamicFormInputs -ControlMap $global:InputControls -Panel $panel1

        $scriptGrabber = New-Object System.Net.WebClient
        $scriptGrabber.Headers.Add('Cache-Control','no-cache')
        $scriptContent = $scriptGrabber.DownloadString($script:selectedFull.script.source_url)

        # expose inputs for the remote script
        $inputvalues = $inputValues
        $logbox.Clear()
        $logFile = $global:LogFilePath
        if (!(Test-Path $logFile)) { New-Item -ItemType File -Path $logFile -Force | Out-Null }
        try {
                $executionResults = Invoke-Expression $scriptContent
                if ($executionResults) {
                        if ($executionResults -is [System.Collections.IEnumerable] -and -not ($executionResults -is [string])) {
                                foreach ($line in $executionResults) {
                                        $logbox.AppendText($line.ToString() + "`n")
                                        Add-Content -Path $logFile -Value $line
                                }
                        } else {
                                $logbox.AppendText($executionResults.ToString() + "`n")
                                Add-Content -Path $logFile -Value $executionResults.ToString()
                        }
                }
        } catch {
                $logbox.AppendText($_.Exception.Message + "`n")
                Add-Content -Path $logFile -Value $_.Exception.Message
        }

}
	
    $buttonsettings_Click = {
        #TODO: Place custom script here
		Show-SettingsDialog
    }
	
    # --End User Generated Script--
    #----------------------------------------------
    #region Generated Events
    #----------------------------------------------
	
    $Form_StateCorrection_Load =
    {
        #Correct the initial state of the form to prevent the .Net maximized form issue
        $ConstructForm.WindowState = $InitialFormWindowState
    }
	
    $Form_StoreValues_Closing =
    {
        #Store the control values
        $script:PrepareScript_logbox = $logbox.Text
    }

	
    $Form_Cleanup_FormClosed =
    {
        #Remove all event handlers from the controls
        try {
            $buttonsettings.remove_Click($buttonsettings_Click)
            $buttonExportLogs.remove_Click($buttonExportLogs_Click)
            $buttonExecute.remove_Click($buttonExecute_Click)
            $ConstructForm.remove_Load($formPrepareScript_Load)
            $ConstructForm.remove_Load($Form_StateCorrection_Load)
            $ConstructForm.remove_Closing($Form_StoreValues_Closing)
            $ConstructForm.remove_FormClosed($Form_Cleanup_FormClosed)
        }
        catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
    }
    #endregion Generated Events

    #----------------------------------------------
    #region Generated Form Code
    #----------------------------------------------
    $ConstructForm.SuspendLayout()
    #
    # ConstructForm
    #
    $ConstructForm.Controls.Add($button1)
    $ConstructForm.Controls.Add($buttonExportLogs)
    $ConstructForm.Controls.Add($buttonExecute)
    $ConstructForm.Controls.Add($logbox)
    $ConstructForm.Controls.Add($panel1)
    $ConstructForm.Controls.Add($buttonDone)
    $ConstructForm.Controls.Add($buttonCancel)
    $ConstructForm.AutoScaleDimensions = New-Object System.Drawing.SizeF(6, 13)
    $ConstructForm.AutoScaleMode = 'Font'
    $ConstructForm.ClientSize = New-Object System.Drawing.Size(843, 704)
    $ConstructForm.Margin = '4, 4, 4, 4'
    $ConstructForm.Name = 'ConstructForm'
    $ConstructForm.RightToLeft = 'No'
    $ConstructForm.StartPosition = 'CenterParent'
    $ConstructForm.Text = 'Form Constructor'
    $ConstructForm.add_Load($formPrepareScript_Load)
    #
    # button1
    #
    $button1.Location = New-Object System.Drawing.Point(197, 669)
    $button1.Name = 'button1'
    $button1.Size = New-Object System.Drawing.Size(50, 23)
    $button1.TabIndex = 6
    $button1.Text = 'button1'
    $button1.UseVisualStyleBackColor = $True
    $button1.add_Click($button1_Click)
    #
    # buttonExportLogs
    #
    $buttonExportLogs.Location = New-Object System.Drawing.Point(29, 659)
    $buttonExportLogs.Name = 'buttonExportLogs'
    $buttonExportLogs.Size = New-Object System.Drawing.Size(87, 32)
    $buttonExportLogs.TabIndex = 5
    $buttonExportLogs.Text = 'ExportLogs'
    $buttonExportLogs.UseVisualStyleBackColor = $True
    $buttonExportLogs.add_Click($buttonExportLogs_Click)
    #
    # buttonExecute
    #
    $buttonExecute.Font = [System.Drawing.Font]::new('Tahoma', '18', [System.Drawing.FontStyle]'Bold')
    $buttonExecute.Location = New-Object System.Drawing.Point(337, 658)
    $buttonExecute.Name = 'buttonExecute'
    $buttonExecute.Size = New-Object System.Drawing.Size(149, 34)
    $buttonExecute.TabIndex = 4
    $buttonExecute.Text = 'Execute'
    $buttonExecute.UseVisualStyleBackColor = $True
    $buttonExecute.add_Click($buttonExecute_Click)
    #
    # logbox
    #
    $logbox.Location = New-Object System.Drawing.Point(79, 436)
    $logbox.Name = 'logbox'
    $logbox.Size = New-Object System.Drawing.Size(689, 208)
    $logbox.TabIndex = 3
    $logbox.Text = ''
    #
    # panel1
    #
    $panel1.Location = New-Object System.Drawing.Point(23, 14)
    $panel1.Name = 'panel1'
    $panel1.Size = New-Object System.Drawing.Size(783, 416)
    $panel1.TabIndex = 2
    #
    # buttonDone
    #
    $buttonDone.Anchor = 'Bottom, Right'
    $buttonDone.DialogResult = 'OK'
    $buttonDone.Location = New-Object System.Drawing.Point(675, 669)
    $buttonDone.Name = 'buttonDone'
    $buttonDone.Size = New-Object System.Drawing.Size(75, 23)
    $buttonDone.TabIndex = 1
    $buttonDone.Text = '&Done'
    $buttonDone.UseCompatibleTextRendering = $True
    $buttonDone.UseVisualStyleBackColor = $True
    #
    # buttonCancel
    #
    $buttonCancel.Anchor = 'Bottom, Right'
    $buttonCancel.CausesValidation = $False
    $buttonCancel.DialogResult = 'Cancel'
    $buttonCancel.Location = New-Object System.Drawing.Point(756, 669)
    $buttonCancel.Name = 'buttonCancel'
    $buttonCancel.Size = New-Object System.Drawing.Size(75, 23)
    $buttonCancel.TabIndex = 0
    $buttonCancel.Text = '&Cancel'
    $buttonCancel.UseCompatibleTextRendering = $True
    $buttonCancel.UseVisualStyleBackColor = $True
    $ConstructForm.ResumeLayout()
    #endregion Generated Form Code

    #----------------------------------------------

    #Save the initial state of the form
    $InitialFormWindowState = $ConstructForm.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $ConstructForm.add_Load($Form_StateCorrection_Load)
    #Clean up the control events
    $ConstructForm.add_FormClosed($Form_Cleanup_FormClosed)
    #Store the control values when form is closing
    $ConstructForm.add_Closing($Form_StoreValues_Closing)
    #Show the Form
    return $ConstructForm.ShowDialog()

}
#endregion Source: PrepareScript.psf

#Start the application
Main ($CommandLine)
